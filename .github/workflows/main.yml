name: CI/CD Pipeline with Security Scan and Notifications

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies (including flake8 for linting)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: pytest

  build-scan-and-push:
    runs-on: ubuntu-latest
    needs: lint-and-test # This job won't run until lint-and-test succeeds
    permissions:
      contents: read
      packages: write # Required to push to GitHub Packages/Container Registry

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Auto-generated token

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false # We build first, then scan, then push
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'table'
          exit-code: '1' 
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push image to GHCR
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  notify:
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-scan-and-push]
    if: always()

    steps:
      - name: Send Discord Notification
        run: |
          # Set status message and color based on the overall job status
          if [ ${{ job.status }} == 'success' ]; then
            STATUS_MESSAGE="Success"
            COLOR=3066993 # Green
          else
            STATUS_MESSAGE="Failure"
            COLOR=15158332 # Red
          fi
          
          # Safely construct the JSON payload using printf
          JSON_PAYLOAD=$(printf '{
            "embeds": [{
              "title": "CI/CD Pipeline Run: %s",
              "description": "The pipeline has finished. [View Workflow Run](https://github.com/%s/actions/runs/%s)",
              "color": %d
            }]
          }' "$STATUS_MESSAGE" "${{ github.repository }}" "${{ github.run_id }}" "$COLOR")

          # Send the notification using curl
          curl -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" "${{ secrets.DISCORD_WEBHOOK_URL }}"